package simulator

import java.io.File

import akka.actor.ActorSystem
import akka.http.scaladsl.Http
import akka.http.scaladsl.model._
import akka.http.scaladsl.model.headers.RawHeader
import akka.stream.scaladsl.Source
import akka.stream.{ActorMaterializer, Materializer, ThrottleMode}
import com.github.tototoshi.csv.CSVReader
import com.typesafe.config.ConfigFactory
import org.slf4j.LoggerFactory
import spray.json.DefaultJsonProtocol._
import spray.json._

import scala.concurrent.duration._
import scala.util.Random

case class Reports(Imei : String , Resource_path : String)

case class CallbackEvents(Reports : List[Reports])

object Client extends App {

  implicit val reports = jsonFormat2(Reports)
  implicit val callbackEvents = jsonFormat1(CallbackEvents)

  val log = LoggerFactory.getLogger(this.getClass)

  val conf = ConfigFactory.load()

  implicit val system = ActorSystem("simulator")
  implicit val ec = system.dispatcher
  implicit val mat: Materializer = ActorMaterializer()

  lazy val throttleLevel = conf.getInt("simulator.event.throttle")
  lazy val maxSimulatorCount = conf.getInt("simulator.event.maxlimit")
  lazy val url = conf.getString("simulator.api.url")
  lazy val accessToken = conf.getString("simulator.api.access_token")

  val reader = CSVReader.open(new File("/home/shubhamagarwal/Downloads/Info.csv"))
  val elementList: List[List[String]] = reader.all()

  def random = Random.nextInt(4)

  def generateReports = {
    val randomSelectedList = elementList(random)
    Reports(randomSelectedList(0).split(":").last , randomSelectedList(1).toList.init.mkString)
  }

  def generateRandomPayload = {
    val reports = (1 to 4).toList.map(_ => generateReports)
    val event = CallbackEvents(reports)
    event.toJson
  }


  def post(data: String) =
      Http(system).singleRequest(
        HttpRequest(
          HttpMethods.POST,
          url,
          entity = HttpEntity(ContentTypes.`application/json`, data.getBytes())
        ).withHeaders(RawHeader("X-Access-Token", accessToken))
      )


  Source.fromIterator(() => Iterator from 0)
    .limit(maxSimulatorCount)
    .map(_ => generateRandomPayload)
    .throttle(throttleLevel , 1.second , throttleLevel , ThrottleMode.shaping)
    .runForeach{
      data =>
        log.warn("Going to call server api with data = "+data)
        post(data.prettyPrint)
    }

}





package simulator

import akka.actor.ActorSystem
import akka.http.scaladsl.Http
import akka.http.scaladsl.server.Directives._
import akka.stream.{ActorMaterializer, Materializer}
import com.typesafe.config.ConfigFactory
import org.slf4j.LoggerFactory



object SimulatorServer extends App {

  implicit val system = ActorSystem("simulator")
  implicit val ec = system.dispatcher
  implicit val mat: Materializer = ActorMaterializer()

  val log = LoggerFactory.getLogger(this.getClass)
  val conf = ConfigFactory.load()
  lazy val host = conf.getString("simulator.api.host")
  lazy val port = conf.getInt("simulator.api.port")

  val route =  path("random") {
    (post & entity(as[String])) { data =>
      println("Data received in call = "+ data)
      complete("Success")
    }
  }

  val bindingFuture = Http().bindAndHandle(route, host, port)
  bindingFuture onComplete{
    case scala.util.Success(value) => log.info("Server started on 8080")
    case scala.util.Failure(exception) => log.error("Some thing went wrong "+exception.printStackTrace())
  }
}

